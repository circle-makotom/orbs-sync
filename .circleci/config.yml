version: 2.1

executors:
  go:
    docker:
      - image: golang:1.18
    resource_class: medium
  ubuntu-docker:
    docker:
      - image: ubuntu:rolling
    resource_class: medium
  ubuntu-machine-aarch64:
    machine:
      image: ubuntu-2004:current
    resource_class: arm.medium
  windows:
    machine:
      image: windows-server-2019-vs2019:stable
    resource_class: windows.medium
    shell: powershell.exe
  macos:
    macos:
      xcode: 13.3.1
    resource_class: macos.x86.medium.gen2

jobs:
  determine-build-name:
    executor: ubuntu-docker
    steps:
      - run:
          name: Determine build name
          command: |
            echo "export BUILD_NAME='0.2.${CIRCLE_BUILD_NUM}-${CIRCLE_SHA1:0:7}'" | tee -a BUILD_NAME
      - persist_to_workspace:
          root: .
          paths:
            - BUILD_NAME

  build:
    executor: go
    parameters:
      goos:
        type: string
      goarch:
        type: string
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt update
            apt install -y zip
      - attach_workspace:
          at: dist
      - run:
          name: Build
          command: |
            . dist/BUILD_NAME
            GOOS_LIST_OVERRIDE=("${TARGET_GOOS}") GOARCH_LIST_OVERRIDE=("${TARGET_GOARCH}") ./build-and-pack-all.sh
          environment:
            TARGET_GOOS: << parameters.goos >>
            TARGET_GOARCH: << parameters.goarch >>
      - persist_to_workspace:
          root: dist
          paths:
            - << parameters.goos >>/<< parameters.goarch >>
            - "*.tar.gz"
            - "*.zip"
      - store_artifacts:
          path: dist
          destination: /

  go-test:
    executor: go
    steps:
      - checkout
      - run: go vet ./...
      - run: go test -cover ./...

  smoke-test-unified:
    parameters:
      executor:
        type: string
      extract-cmd:
        type: string
    executor: << parameters.executor >>
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Extracting executable
          command: << parameters.extract-cmd >>
      - run:
          name: Show version
          command: ./orbs-sync --version
      - run:
          name: Show help message
          command: ./orbs-sync --help
      - run:
          name: Run without command line arguments
          command: ./orbs-sync

  release:
    executor: ubuntu-docker
    steps:
      - run:
          name: Install dependencies
          command: |
            apt update
            apt install -y curl git

            tmpPath=$(mktemp)
            curl -sSJL https://api.github.com/repos/cli/cli/releases/latest | grep -o 'https://github.com/cli/cli/releases/download/[^/]\{1,\}/gh_[^/]\{1,\}_linux_amd64.deb' | xargs curl -o $tmpPath -JL
            dpkg -i $tmpPath
      - attach_workspace:
          at: .
      - run:
          name: Create a release
          command: |
            . BUILD_NAME
            gh release create -R "${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}" -t "${BUILD_NAME}" -n "" "${BUILD_NAME}" --target "${CIRCLE_SHA1}" ./*.tar.gz ./*.zip

workflows:
  build-test-release:
    jobs:
      - determine-build-name
      - build:
          name: build-<< matrix.goos >>-<< matrix.goarch >>
          matrix:
            parameters:
              goos:
                - linux
                - windows
                - darwin
              goarch:
                - amd64
                - arm64
          requires:
            - determine-build-name

      - go-test:
          requires:
            - determine-build-name

      - smoke-test-unified:
          name: smoke-test-linux-amd64
          requires:
            - build-linux-amd64
          executor: ubuntu-docker
          extract-cmd: |
            apt update
            apt install -y ca-certificates
            . BUILD_NAME
            tar -xf "orbs-sync-${BUILD_NAME}-linux-amd64.tar.gz"
      - smoke-test-unified:
          name: smoke-test-linux-arm64
          requires:
            - build-linux-arm64
          executor: ubuntu-machine-aarch64
          extract-cmd: |
            . BUILD_NAME
            tar -xf "orbs-sync-${BUILD_NAME}-linux-arm64.tar.gz"
      - smoke-test-unified:
          name: smoke-test-windows-amd64
          requires:
            - build-windows-amd64
          executor: windows
          extract-cmd: |
            $ProgressPreference = "SilentlyContinue"
            $BuildName = $(& bash -c '. BUILD_NAME; printenv BUILD_NAME')
            Expand-Archive "orbs-sync-${BuildName}-windows-amd64.zip" .
      - smoke-test-unified:
          name: smoke-test-darwin-amd64
          requires:
            - build-darwin-amd64
          executor: macos
          extract-cmd: |
            . BUILD_NAME
            unzip "orbs-sync-${BUILD_NAME}-darwin-amd64.zip"

      - release:
          requires:
            - build
            - go-test
            - smoke-test-linux-amd64
            - smoke-test-linux-arm64
            - smoke-test-windows-amd64
            - smoke-test-darwin-amd64
          context:
            - github
          filters:
            branches:
              only: main
